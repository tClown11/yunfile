// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/account.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AccountService service

func NewAccountServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AccountService service

type AccountService interface {
	Signin(ctx context.Context, in *ReqSignin, opts ...client.CallOption) (*ResSignin, error)
	Signup(ctx context.Context, in *ReqSignup, opts ...client.CallOption) (*ResSignup, error)
	SelectUserFileAll(ctx context.Context, in *ReqGetUserFile, opts ...client.CallOption) (*ResGetUserFile, error)
	RenameFile(ctx context.Context, in *ReqReName, opts ...client.CallOption) (*ResReName, error)
	UserInfo(ctx context.Context, in *ReqUserInfo, opts ...client.CallOption) (*ResUserInfo, error)
}

type accountService struct {
	c    client.Client
	name string
}

func NewAccountService(name string, c client.Client) AccountService {
	return &accountService{
		c:    c,
		name: name,
	}
}

func (c *accountService) Signin(ctx context.Context, in *ReqSignin, opts ...client.CallOption) (*ResSignin, error) {
	req := c.c.NewRequest(c.name, "AccountService.Signin", in)
	out := new(ResSignin)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) Signup(ctx context.Context, in *ReqSignup, opts ...client.CallOption) (*ResSignup, error) {
	req := c.c.NewRequest(c.name, "AccountService.Signup", in)
	out := new(ResSignup)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) SelectUserFileAll(ctx context.Context, in *ReqGetUserFile, opts ...client.CallOption) (*ResGetUserFile, error) {
	req := c.c.NewRequest(c.name, "AccountService.SelectUserFileAll", in)
	out := new(ResGetUserFile)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) RenameFile(ctx context.Context, in *ReqReName, opts ...client.CallOption) (*ResReName, error) {
	req := c.c.NewRequest(c.name, "AccountService.RenameFile", in)
	out := new(ResReName)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UserInfo(ctx context.Context, in *ReqUserInfo, opts ...client.CallOption) (*ResUserInfo, error) {
	req := c.c.NewRequest(c.name, "AccountService.UserInfo", in)
	out := new(ResUserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountService service

type AccountServiceHandler interface {
	Signin(context.Context, *ReqSignin, *ResSignin) error
	Signup(context.Context, *ReqSignup, *ResSignup) error
	SelectUserFileAll(context.Context, *ReqGetUserFile, *ResGetUserFile) error
	RenameFile(context.Context, *ReqReName, *ResReName) error
	UserInfo(context.Context, *ReqUserInfo, *ResUserInfo) error
}

func RegisterAccountServiceHandler(s server.Server, hdlr AccountServiceHandler, opts ...server.HandlerOption) error {
	type accountService interface {
		Signin(ctx context.Context, in *ReqSignin, out *ResSignin) error
		Signup(ctx context.Context, in *ReqSignup, out *ResSignup) error
		SelectUserFileAll(ctx context.Context, in *ReqGetUserFile, out *ResGetUserFile) error
		RenameFile(ctx context.Context, in *ReqReName, out *ResReName) error
		UserInfo(ctx context.Context, in *ReqUserInfo, out *ResUserInfo) error
	}
	type AccountService struct {
		accountService
	}
	h := &accountServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AccountService{h}, opts...))
}

type accountServiceHandler struct {
	AccountServiceHandler
}

func (h *accountServiceHandler) Signin(ctx context.Context, in *ReqSignin, out *ResSignin) error {
	return h.AccountServiceHandler.Signin(ctx, in, out)
}

func (h *accountServiceHandler) Signup(ctx context.Context, in *ReqSignup, out *ResSignup) error {
	return h.AccountServiceHandler.Signup(ctx, in, out)
}

func (h *accountServiceHandler) SelectUserFileAll(ctx context.Context, in *ReqGetUserFile, out *ResGetUserFile) error {
	return h.AccountServiceHandler.SelectUserFileAll(ctx, in, out)
}

func (h *accountServiceHandler) RenameFile(ctx context.Context, in *ReqReName, out *ResReName) error {
	return h.AccountServiceHandler.RenameFile(ctx, in, out)
}

func (h *accountServiceHandler) UserInfo(ctx context.Context, in *ReqUserInfo, out *ResUserInfo) error {
	return h.AccountServiceHandler.UserInfo(ctx, in, out)
}
